{"ast":null,"code":"const FieldValidator = require('./FieldValidator');\n\nclass Validator {\n  constructor(input, rules) {\n    this.valid = null;\n    this.errors = [];\n    this.fieldErrors = [];\n    this.reverse = false;\n    this.input = input;\n    this.rules = rules;\n  }\n\n  validate() {\n    let valid = true;\n    this.errors = [];\n\n    for (const field in this.rules) {\n      const fieldValidator = new FieldValidator(field, this.input[field], this.rules[field], this.input);\n\n      if (!fieldValidator.validate() && !this.reverse) {\n        valid = false;\n        this.errors.push(fieldValidator.error);\n        this.fieldErrors.push({\n          field: field,\n          error: fieldValidator.fieldError\n        });\n      } else if (this.reverse && fieldValidator.validate()) {\n        // This is pretty much just here for testing //\n        valid = false;\n        this.errors.push(field + ' is valid');\n        this.fieldErrors.push({\n          field: field,\n          error: 'Is valid'\n        });\n      }\n    }\n\n    this.valid = valid;\n    return valid;\n  }\n\n}\n\nValidator.FieldValidator = FieldValidator;\nmodule.exports = Validator;","map":{"version":3,"sources":["E:/Zero to mastery/Apps Developed/facedetector/node_modules/input-field-validator/Validator.js"],"names":["FieldValidator","require","Validator","constructor","input","rules","valid","errors","fieldErrors","reverse","validate","field","fieldValidator","push","error","fieldError","module","exports"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAMC,SAAN,CAAgB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACzB,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,WAAL,GAAmB,EAAnB;AAEA,SAAKC,OAAL,GAAe,KAAf;AAEA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA;;AAEDK,EAAAA,QAAQ,GAAG;AACV,QAAIJ,KAAK,GAAG,IAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;;AAEA,SAAK,MAAMI,KAAX,IAAoB,KAAKN,KAAzB,EAAgC;AAC/B,YAAMO,cAAc,GAAG,IAAIZ,cAAJ,CAAmBW,KAAnB,EAA0B,KAAKP,KAAL,CAAWO,KAAX,CAA1B,EAA6C,KAAKN,KAAL,CAAWM,KAAX,CAA7C,EAAgE,KAAKP,KAArE,CAAvB;;AAEA,UAAI,CAACQ,cAAc,CAACF,QAAf,EAAD,IAA8B,CAAC,KAAKD,OAAxC,EAAiD;AAChDH,QAAAA,KAAK,GAAG,KAAR;AACA,aAAKC,MAAL,CAAYM,IAAZ,CAAiBD,cAAc,CAACE,KAAhC;AACA,aAAKN,WAAL,CAAiBK,IAAjB,CAEC;AACCF,UAAAA,KAAK,EAAEA,KADR;AAECG,UAAAA,KAAK,EAAEF,cAAc,CAACG;AAFvB,SAFD;AAOA,OAVD,MAUO,IAAI,KAAKN,OAAL,IAAgBG,cAAc,CAACF,QAAf,EAApB,EAA+C;AAAE;AACvDJ,QAAAA,KAAK,GAAG,KAAR;AACA,aAAKC,MAAL,CAAYM,IAAZ,CAAiBF,KAAK,GAAG,WAAzB;AACA,aAAKH,WAAL,CAAiBK,IAAjB,CAEC;AACCF,UAAAA,KAAK,EAAEA,KADR;AAECG,UAAAA,KAAK,EAAE;AAFR,SAFD;AAOA;AACD;;AAED,SAAKR,KAAL,GAAaA,KAAb;AAEA,WAAOA,KAAP;AACA;;AA7Cc;;AAgDhBJ,SAAS,CAACF,cAAV,GAA2BA,cAA3B;AAEAgB,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["const FieldValidator = require('./FieldValidator');\n\nclass Validator {\n\tconstructor(input, rules) {\n\t\tthis.valid = null;\n\t\tthis.errors = [];\n\t\tthis.fieldErrors = [];\n\n\t\tthis.reverse = false;\n\n\t\tthis.input = input;\n\t\tthis.rules = rules;\n\t}\n\n\tvalidate() {\n\t\tlet valid = true;\n\t\tthis.errors = [];\n\n\t\tfor (const field in this.rules) {\n\t\t\tconst fieldValidator = new FieldValidator(field, this.input[field], this.rules[field], this.input);\n\n\t\t\tif (!fieldValidator.validate() && !this.reverse) {\n\t\t\t\tvalid = false;\n\t\t\t\tthis.errors.push(fieldValidator.error);\n\t\t\t\tthis.fieldErrors.push\n\t\t\t\t(\n\t\t\t\t\t{\n\t\t\t\t\t\tfield: field,\n\t\t\t\t\t\terror: fieldValidator.fieldError\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else if (this.reverse && fieldValidator.validate()) { // This is pretty much just here for testing //\n\t\t\t\tvalid = false;\n\t\t\t\tthis.errors.push(field + ' is valid');\n\t\t\t\tthis.fieldErrors.push\n\t\t\t\t(\n\t\t\t\t\t{\n\t\t\t\t\t\tfield: field,\n\t\t\t\t\t\terror: 'Is valid'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.valid = valid;\n\n\t\treturn valid;\n\t}\n}\n\nValidator.FieldValidator = FieldValidator;\n\nmodule.exports = Validator;\n"]},"metadata":{},"sourceType":"script"}